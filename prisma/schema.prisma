generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  Client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?

  @@map("users")
}

model Ticket {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  views         Int?
  type          String          @default("ABERTO")
  prioridade    String?         @default("BAIXA")
  status        Boolean         @default(true)
  client        Client?         @relation(fields: [clientId], references: [id])
  clientId      Int?
  created_at    DateTime        @default(now())
  upadted_at    DateTime        @updatedAt
  ticketRoadMap ticketRoadMap[]

  @@map("tickets")
}

model Client {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  views       Int?
  type        String
  user        User[]
  ticket      Ticket[]

  @@map("clients")
}

model ticketRoadMap {
  id         Int       @id @default(autoincrement())
  name       String    @default("ABERTO")
  message    String    @default("Criado")
  className  String
  messages   Messages? @relation(fields: [messagesId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messagesId Int?
  ticket     Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketId   Int
  created_at DateTime  @default(now())
  upadted_at DateTime  @updatedAt
}

model Messages {
  id            Int             @id @default(autoincrement())
  title         String
  type          String
  message       String
  created_at    DateTime        @default(now())
  upadted_at    DateTime        @updatedAt
  ticketRoadMap ticketRoadMap[]
}
